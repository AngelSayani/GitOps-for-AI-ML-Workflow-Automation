{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Infrastructure for GitOps Progressive Delivery Lab with ArgoCD",
  "Resources": {
    "LabVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [{"Key": "Name", "Value": "GitOps-Lab-VPC"}]
      }
    },
    "LabSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "LabVPC"},
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": {"Fn::Select": [0, {"Fn::GetAZs": ""}]},
        "MapPublicIpOnLaunch": true,
        "Tags": [{"Key": "Name", "Value": "GitOps-Lab-Subnet"}]
      }
    },
    "LabIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{"Key": "Name", "Value": "GitOps-Lab-IGW"}]
      }
    },
    "LabVPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "LabVPC"},
        "InternetGatewayId": {"Ref": "LabIGW"}
      }
    },
    "LabRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "LabVPC"},
        "Tags": [{"Key": "Name", "Value": "GitOps-Lab-RouteTable"}]
      }
    },
    "LabRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "LabVPCGatewayAttachment",
      "Properties": {
        "RouteTableId": {"Ref": "LabRouteTable"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "LabIGW"}
      }
    },
    "LabSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "LabSubnet"},
        "RouteTableId": {"Ref": "LabRouteTable"}
      }
    },
    "LabSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for GitOps Lab instance",
        "VpcId": {"Ref": "LabVPC"},
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 8080,
            "ToPort": 8080,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 8081,
            "ToPort": 8081,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 30000,
            "ToPort": 32767,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "EC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t3.medium",
        "ImageId": "%ami-203%",
        "SubnetId": {"Ref": "LabSubnet"},
        "SecurityGroupIds": [{"Ref": "LabSecurityGroup"}],
        "IamInstanceProfile": {"Ref": "LabInstanceProfile"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash -xe\n",
              "echo 'cloud_user:%password%' | chpasswd\n",
              "yum update -y\n",
              "\n",
              "# Install Docker\n",
              "yum install -y docker git\n",
              "systemctl start docker\n",
              "systemctl enable docker\n",
              "usermod -aG docker cloud_user\n",
              "\n",
              "# Install k3d for lightweight Kubernetes\n",
              "curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash\n",
              "\n",
              "# Install kubectl\n",
              "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n",
              "install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n",
              "\n",
              "# Install ArgoCD CLI\n",
              "curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64\n",
              "chmod +x /usr/local/bin/argocd\n",
              "\n",
              "# Setup bash completion\n",
              "echo 'source <(kubectl completion bash)' >> /home/cloud_user/.bashrc\n",
              "echo 'alias k=kubectl' >> /home/cloud_user/.bashrc\n",
              "echo 'complete -F __start_kubectl k' >> /home/cloud_user/.bashrc\n",
              "\n",
              "# Create setup script for the user\n",
              "cat > /home/cloud_user/setup.sh << 'EOL'\n",
              "#!/bin/bash\n",
              "echo \"Starting k3d cluster setup...\"\n",
              "k3d cluster create gitops-lab --api-port 6550 -p \"8081:80@loadbalancer\" --agents 2\n",
              "kubectl cluster-info\n",
              "echo \"Cluster setup complete!\"\n",
              "EOL\n",
              "\n",
              "chmod +x /home/cloud_user/setup.sh\n",
              "chown cloud_user:cloud_user /home/cloud_user/setup.sh\n",
              "\n",
              "# Create lab files directory\n",
              "mkdir -p /home/cloud_user/lab-files\n",
              "\n",
              "# Clone the GitHub repository\n",
              "cd /home/cloud_user/lab-files\n",
              "git clone https://github.com/AngelSayani/GitOps-for-Progressive-Delivery.git\n",
              "chown -R cloud_user:cloud_user /home/cloud_user/lab-files\n",
              "\n",
              "# Create ArgoCD install script\n",
              "cat > /home/cloud_user/install-argocd.sh << 'EOL'\n",
              "#!/bin/bash\n",
              "kubectl create namespace argocd\n",
              "kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n",
              "echo \"Waiting for ArgoCD to be ready...\"\n",
              "kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s\n",
              "echo \"ArgoCD installation complete!\"\n",
              "EOL\n",
              "\n",
              "chmod +x /home/cloud_user/install-argocd.sh\n",
              "chown cloud_user:cloud_user /home/cloud_user/install-argocd.sh\n",
              "\n",
              "# Create port-forward script\n",
              "cat > /home/cloud_user/argocd-port-forward.sh << 'EOL'\n",
              "#!/bin/bash\n",
              "kubectl port-forward svc/argocd-server -n argocd 8080:443 --address=0.0.0.0 &\n",
              "echo \"ArgoCD UI is being forwarded to port 8080\"\n",
              "echo \"Process ID: $!\"\n",
              "EOL\n",
              "\n",
              "chmod +x /home/cloud_user/argocd-port-forward.sh\n",
              "chown cloud_user:cloud_user /home/cloud_user/argocd-port-forward.sh\n",
              "\n",
              "# Create get-password script\n",
              "cat > /home/cloud_user/get-argocd-password.sh << 'EOL'\n",
              "#!/bin/bash\n",
              "echo \"ArgoCD admin password:\"\n",
              "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n",
              "echo \"\"\n",
              "EOL\n",
              "\n",
              "chmod +x /home/cloud_user/get-argocd-password.sh\n",
              "chown cloud_user:cloud_user /home/cloud_user/get-argocd-password.sh\n",
              "\n",
              "# Download and execute the environment setup\n",
              "curl -s https://raw.githubusercontent.com/AngelSayani/GitOps-for-Progressive-Delivery/main/setup-env.sh -o /tmp/setup-env.sh\n",
              "chmod +x /tmp/setup-env.sh\n",
              "/tmp/setup-env.sh\n"
            ]]
          }
        },
        "Tags": [{"Key": "Name", "Value": "GitOps-Lab-Instance"}]
      }
    },
    "LabRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "ec2.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        ]
      }
    },
    "LabInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [{"Ref": "LabRole"}]
      }
    }
  },
  "Outputs": {
    "pubIpAddress1": {
      "Description": "Public IP of Virtual Machine",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance",
          "PublicIp"
        ]
      }
    },
    "privIpAddress1": {
      "Description": "Private IP of Virtual Machine",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance",
          "PrivateIp"
        ]
      }
    }
  }
}
